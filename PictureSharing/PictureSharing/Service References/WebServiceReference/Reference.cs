//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace PictureSharing.WebServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/ThreadingServices")]
    public partial class User : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long GebruikerIDField;
        
        private string GebruikerNaamField;
        
        private string GebruikersPWField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long GebruikerID {
            get {
                return this.GebruikerIDField;
            }
            set {
                if ((this.GebruikerIDField.Equals(value) != true)) {
                    this.GebruikerIDField = value;
                    this.RaisePropertyChanged("GebruikerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GebruikerNaam {
            get {
                return this.GebruikerNaamField;
            }
            set {
                if ((object.ReferenceEquals(this.GebruikerNaamField, value) != true)) {
                    this.GebruikerNaamField = value;
                    this.RaisePropertyChanged("GebruikerNaam");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GebruikersPW {
            get {
                return this.GebruikersPWField;
            }
            set {
                if ((object.ReferenceEquals(this.GebruikersPWField, value) != true)) {
                    this.GebruikersPWField = value;
                    this.RaisePropertyChanged("GebruikersPW");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Foto", Namespace="http://schemas.datacontract.org/2004/07/ThreadingServices")]
    public partial class Foto : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long FotoIDField;
        
        private string FotoNaamField;
        
        private long GebruikerIDField;
        
        private string PathField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long FotoID {
            get {
                return this.FotoIDField;
            }
            set {
                if ((this.FotoIDField.Equals(value) != true)) {
                    this.FotoIDField = value;
                    this.RaisePropertyChanged("FotoID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FotoNaam {
            get {
                return this.FotoNaamField;
            }
            set {
                if ((object.ReferenceEquals(this.FotoNaamField, value) != true)) {
                    this.FotoNaamField = value;
                    this.RaisePropertyChanged("FotoNaam");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long GebruikerID {
            get {
                return this.GebruikerIDField;
            }
            set {
                if ((this.GebruikerIDField.Equals(value) != true)) {
                    this.GebruikerIDField = value;
                    this.RaisePropertyChanged("GebruikerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WebServiceReference.IThreadingWebService")]
    public interface IThreadingWebService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThreadingWebService/GetGebruikersNaam", ReplyAction="http://tempuri.org/IThreadingWebService/GetGebruikersNaamResponse")]
        System.Threading.Tasks.Task<string> GetGebruikersNaamAsync(long gebrID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThreadingWebService/GetGebruikersPW", ReplyAction="http://tempuri.org/IThreadingWebService/GetGebruikersPWResponse")]
        System.Threading.Tasks.Task<string> GetGebruikersPWAsync(long gebrID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThreadingWebService/SetGebruikersNaam", ReplyAction="http://tempuri.org/IThreadingWebService/SetGebruikersNaamResponse")]
        System.Threading.Tasks.Task<bool> SetGebruikersNaamAsync(string gebruikersNaam, long gebrID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThreadingWebService/SetGebruikersPW", ReplyAction="http://tempuri.org/IThreadingWebService/SetGebruikersPWResponse")]
        System.Threading.Tasks.Task<bool> SetGebruikersPWAsync(string password, long gebrID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThreadingWebService/AddGebruiker", ReplyAction="http://tempuri.org/IThreadingWebService/AddGebruikerResponse")]
        System.Threading.Tasks.Task AddGebruikerAsync(PictureSharing.WebServiceReference.User gebruiker);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThreadingWebService/GetGebruiker", ReplyAction="http://tempuri.org/IThreadingWebService/GetGebruikerResponse")]
        System.Threading.Tasks.Task<PictureSharing.WebServiceReference.User> GetGebruikerAsync(long gebrID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThreadingWebService/GetGebruikerByName", ReplyAction="http://tempuri.org/IThreadingWebService/GetGebruikerByNameResponse")]
        System.Threading.Tasks.Task<bool> GetGebruikerByNameAsync(string gebruikersnaam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThreadingWebService/GetAllGebruikers", ReplyAction="http://tempuri.org/IThreadingWebService/GetAllGebruikersResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PictureSharing.WebServiceReference.User>> GetAllGebruikersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThreadingWebService/InlogMethode", ReplyAction="http://tempuri.org/IThreadingWebService/InlogMethodeResponse")]
        System.Threading.Tasks.Task<PictureSharing.WebServiceReference.User> InlogMethodeAsync(string gebrNaam, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThreadingWebService/UploadFoto", ReplyAction="http://tempuri.org/IThreadingWebService/UploadFotoResponse")]
        System.Threading.Tasks.Task<string> UploadFotoAsync(string filename, byte[] imageStream, long gebrID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThreadingWebService/GetFotoNaam", ReplyAction="http://tempuri.org/IThreadingWebService/GetFotoNaamResponse")]
        System.Threading.Tasks.Task<string> GetFotoNaamAsync(long fotoID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThreadingWebService/GetFotoPath", ReplyAction="http://tempuri.org/IThreadingWebService/GetFotoPathResponse")]
        System.Threading.Tasks.Task<string> GetFotoPathAsync(long fotoID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThreadingWebService/GetAllFotos", ReplyAction="http://tempuri.org/IThreadingWebService/GetAllFotosResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PictureSharing.WebServiceReference.Foto>> GetAllFotosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThreadingWebService/SetFotoPath", ReplyAction="http://tempuri.org/IThreadingWebService/SetFotoPathResponse")]
        System.Threading.Tasks.Task<bool> SetFotoPathAsync(long fotoID, string fotoPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThreadingWebService/SetFotoNaam", ReplyAction="http://tempuri.org/IThreadingWebService/SetFotoNaamResponse")]
        System.Threading.Tasks.Task<bool> SetFotoNaamAsync(long fotoID, string fotoNaam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThreadingWebService/AddFoto", ReplyAction="http://tempuri.org/IThreadingWebService/AddFotoResponse")]
        System.Threading.Tasks.Task AddFotoAsync(PictureSharing.WebServiceReference.Foto foto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThreadingWebService/GetGebruikerID", ReplyAction="http://tempuri.org/IThreadingWebService/GetGebruikerIDResponse")]
        System.Threading.Tasks.Task<long> GetGebruikerIDAsync(long fotoID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThreadingWebService/GetFotoByGebruiker", ReplyAction="http://tempuri.org/IThreadingWebService/GetFotoByGebruikerResponse")]
        System.Threading.Tasks.Task<PictureSharing.WebServiceReference.Foto> GetFotoByGebruikerAsync(long gebrID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThreadingWebService/DeleteFoto", ReplyAction="http://tempuri.org/IThreadingWebService/DeleteFotoResponse")]
        System.Threading.Tasks.Task DeleteFotoAsync(long fotoID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IThreadingWebService/GetAllFotosById", ReplyAction="http://tempuri.org/IThreadingWebService/GetAllFotosByIdResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PictureSharing.WebServiceReference.Foto>> GetAllFotosByIdAsync(long gebrId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IThreadingWebServiceChannel : PictureSharing.WebServiceReference.IThreadingWebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ThreadingWebServiceClient : System.ServiceModel.ClientBase<PictureSharing.WebServiceReference.IThreadingWebService>, PictureSharing.WebServiceReference.IThreadingWebService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ThreadingWebServiceClient() : 
                base(ThreadingWebServiceClient.GetDefaultBinding(), ThreadingWebServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IThreadingWebService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ThreadingWebServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ThreadingWebServiceClient.GetBindingForEndpoint(endpointConfiguration), ThreadingWebServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ThreadingWebServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ThreadingWebServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ThreadingWebServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ThreadingWebServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ThreadingWebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<string> GetGebruikersNaamAsync(long gebrID) {
            return base.Channel.GetGebruikersNaamAsync(gebrID);
        }
        
        public System.Threading.Tasks.Task<string> GetGebruikersPWAsync(long gebrID) {
            return base.Channel.GetGebruikersPWAsync(gebrID);
        }
        
        public System.Threading.Tasks.Task<bool> SetGebruikersNaamAsync(string gebruikersNaam, long gebrID) {
            return base.Channel.SetGebruikersNaamAsync(gebruikersNaam, gebrID);
        }
        
        public System.Threading.Tasks.Task<bool> SetGebruikersPWAsync(string password, long gebrID) {
            return base.Channel.SetGebruikersPWAsync(password, gebrID);
        }
        
        public System.Threading.Tasks.Task AddGebruikerAsync(PictureSharing.WebServiceReference.User gebruiker) {
            return base.Channel.AddGebruikerAsync(gebruiker);
        }
        
        public System.Threading.Tasks.Task<PictureSharing.WebServiceReference.User> GetGebruikerAsync(long gebrID) {
            return base.Channel.GetGebruikerAsync(gebrID);
        }
        
        public System.Threading.Tasks.Task<bool> GetGebruikerByNameAsync(string gebruikersnaam) {
            return base.Channel.GetGebruikerByNameAsync(gebruikersnaam);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PictureSharing.WebServiceReference.User>> GetAllGebruikersAsync() {
            return base.Channel.GetAllGebruikersAsync();
        }
        
        public System.Threading.Tasks.Task<PictureSharing.WebServiceReference.User> InlogMethodeAsync(string gebrNaam, string password) {
            return base.Channel.InlogMethodeAsync(gebrNaam, password);
        }
        
        public System.Threading.Tasks.Task<string> UploadFotoAsync(string filename, byte[] imageStream, long gebrID) {
            return base.Channel.UploadFotoAsync(filename, imageStream, gebrID);
        }
        
        public System.Threading.Tasks.Task<string> GetFotoNaamAsync(long fotoID) {
            return base.Channel.GetFotoNaamAsync(fotoID);
        }
        
        public System.Threading.Tasks.Task<string> GetFotoPathAsync(long fotoID) {
            return base.Channel.GetFotoPathAsync(fotoID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PictureSharing.WebServiceReference.Foto>> GetAllFotosAsync() {
            return base.Channel.GetAllFotosAsync();
        }
        
        public System.Threading.Tasks.Task<bool> SetFotoPathAsync(long fotoID, string fotoPath) {
            return base.Channel.SetFotoPathAsync(fotoID, fotoPath);
        }
        
        public System.Threading.Tasks.Task<bool> SetFotoNaamAsync(long fotoID, string fotoNaam) {
            return base.Channel.SetFotoNaamAsync(fotoID, fotoNaam);
        }
        
        public System.Threading.Tasks.Task AddFotoAsync(PictureSharing.WebServiceReference.Foto foto) {
            return base.Channel.AddFotoAsync(foto);
        }
        
        public System.Threading.Tasks.Task<long> GetGebruikerIDAsync(long fotoID) {
            return base.Channel.GetGebruikerIDAsync(fotoID);
        }
        
        public System.Threading.Tasks.Task<PictureSharing.WebServiceReference.Foto> GetFotoByGebruikerAsync(long gebrID) {
            return base.Channel.GetFotoByGebruikerAsync(gebrID);
        }
        
        public System.Threading.Tasks.Task DeleteFotoAsync(long fotoID) {
            return base.Channel.DeleteFotoAsync(fotoID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<PictureSharing.WebServiceReference.Foto>> GetAllFotosByIdAsync(long gebrId) {
            return base.Channel.GetAllFotosByIdAsync(gebrId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IThreadingWebService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IThreadingWebService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:39046/ThreadingWebService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return ThreadingWebServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IThreadingWebService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return ThreadingWebServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IThreadingWebService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IThreadingWebService,
        }
    }
}
